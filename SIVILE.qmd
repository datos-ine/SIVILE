---
title: "Reporte Epidemiológico SIVILE 2024"
author: Instituto Nacional de Epidemiología
format: 
    dashboard:
        logo: logo.svg
        orientation: columns
        vertical_layout: fill
        theme: custom.scss
server: shiny
---

```{r}
#| id: Cargar paquetes
#| context: setup
pacman::p_load(
  # Quarto
  quarto,
  # Interactividad
  shiny,
  # Mapas
  sf,
  leaflet,
  geoAr,
  # Gráficos
  cols4all,
  apyramid,
  patchwork,
  cowplot,
  labelled,
  # Tablas
  DT,
  # Manejo de datos
  rio,
  janitor,
  scales,
  tidyverse
)

### La app se renderiza con:
# quarto_publish_app(server = "shinyapps.io", account = "datos-ine")
```

```{r}
#| id: Cargar datos SIVILE
#| context: setup
##  Cargar resumen dataset ----
res <- import("clean/resumen.csv")

## Cargar datos SIVILE ----
datos <- import("clean/clean_SIVILE_2024.rds")
```

```{r}
#| id: Cargar capas GIS
#| context: setup
## URL mapas base ----
argenmap <- "https://wms.ign.gob.ar/geoserver/gwc/service/tms/1.0.0/capabaseargenmap@EPSG%3A3857@png/{z}/{x}/{-y}.png
"

argenmap_hyb <- "https://wms.ign.gob.ar/geoserver/gwc/service/tms/1.0.0/mapabase_hibrido@EPSG%3A3857@png/{z}/{x}/{-y}.png
"

## Cargar shapefile provincias ----
shp_arg <- get_geo("ARGENTINA", level = "provincia") |>
  # Añadir códigos provincias
  add_geo_codes() |>

  # Cambiar nombre CABA
  mutate(name_iso = if_else(codprov == "01", "CABA", name_iso)) |>

  # Convertir a puntos
  st_point_on_surface()
```

# UCL
## Valuebox {width="25%"}

```{r}
#| content: valuebox
#| title: UCL SIVILE activas
#| icon: hospital
#| color: primary
list(value = res$n_ucl)
```

```{r}
#| content: valuebox
#| title: Registros totales
#| icon: file-text
list(value = res$n)
```

```{r}
#| content: valuebox
#| title: Registros válidos (*)
#| icon: file-text
#| color: warning
list(value = nrow(datos))
```

<div style="font-size:0.5rem;">
(*) Datos completos para las variables obligatorias: código establecimiento, sexo, edad, fecha de lesión, mecanismo, intencionalidad y egreso.
</div>

## Mapa {width="75%"}

```{r}
#| id: Mapa 1
#| context: server
## Crear shapefile para el mapa
datos_mapa <- shp_arg |>
  select(name_iso) |>
  inner_join(
    datos |>
      count(prov_ucl, id_prov_ucl) |>
      mutate(pct = n / sum(n, na.rm = TRUE)),
    by = join_by(name_iso == prov_ucl)
  ) |>
  arrange(name_iso)

## Renderizar mapa
output$mapa1 <- renderLeaflet({
  # Crear paleta de colores colorblind-friendly
  pal <- colorNumeric(
    palette = c4a(palette = input$pal1),
    domain = c(0, max(datos_mapa$n, na.rm = TRUE))
  )

  # Crear mapa interactivo
  m1 <- datos_mapa |>
    # Capa base Argentina
    leaflet(options = leafletOptions(minZoom = 3, maxZoom = 8)) |>
    addTiles(
      urlTemplate = input$base1,
      attribution = "Instituto Geográfico Nacional (IGN)"
    ) |>

    # Capa casos x UCL x provincia
    addCircleMarkers(
      radius = rescale(sqrt(datos_mapa$n), to = c(5, 15)),
      fillOpacity = 0.75,
      fillColor = pal(datos_mapa$n),
      stroke = FALSE,
      clusterOptions = markerClusterOptions(
        maxClusterRadius = 10
      ),
      popup = ~ paste0(
        "<b>Provincia: </b> ",
        name_iso,
        "<br>",
        "<b>UCL: </b>",
        id_prov_ucl,
        "<br>",
        "<b>Casos: </b>",
        n,
        " (",
        percent(pct, accuracy = .1),
        " total país)"
      )
    ) |>

    # Añadir leyenda
    addLegend(
      title = "Casos por UCL",
      pal = pal,
      values = datos_mapa$n,
      position = "bottomright"
    )

  # Mostrar
  m1
})

## Guardar datos del mapa como CSV
output$down_csv1 <- downloadHandler(
  filename = function() {
    paste0("datos_casos_UCL_2024", ".csv")
  },
  content = function(file) {
    datos_mapa |>
      st_drop_geometry() |>
      export(file = file, encoding = "UTF-8")
  }
)

## Guardar datos del mapa como XLSX
output$down_excel1 <- downloadHandler(
  filename = function() {
    paste0("datos_casos_UCL_2024", ".xlsx")
  },
  content = function(file) {
    datos_mapa |>
      st_drop_geometry() |>
      export(file = file, encoding = "UTF-8")
  }
)
```

```{r}
#| id: Toolbar mapa 1
#| content: card-toolbar
## Selector de colores
selectInput(
  inputId = "pal1",
  label = "Paleta de colores",
  choices = c(
    "Managua" = "scico.managua",
    "Icefire" = "icefire",
    "Tokyo" = "-scico.tokyo",
    "Viridis" = "-viridis"
  ),
  selected = "-viridis"
)

## Mapa base
selectInput(
  inputId = "base1",
  label = "Mapa base",
  choices = c(
    "Argenmap (híbrido)" = argenmap_hyb,
    # "Argenmap (gris)" = argenmap_gris,
    "Argenmap (color)" = argenmap
  )
)

## Descargar datos
tags$p("Descargar datos:")

# CSV
downloadButton(
  outputId = "down_csv1",
  label = NULL,
  icon = icon("file-csv"),
  class = "btn-download"
)

# Excel
downloadButton(
  outputId = "down_excel1",
  label = NULL,
  icon = icon("file-excel"),
  class = "btn-download"
)
```

```{r}
#| id: Mostrar mapa 1
leafletOutput("mapa1")
```

# Provincia
## {.toolbar}
```{r}
#| id: Toolbar mapa 2 y tabla 1
## Selector de variable provincia
selectInput(
  inputId = "provincia",
  label = "Mostrar datos por",
  choices = c(
    "Prov. UCL" = "prov_ucl",
    "Prov. lesión" = "prov_lesion"
  )
)

## Selector de estratos
selectInput(
  inputId = "estrato1",
  label = "Estratificar por",
  # inline = TRUE,
  choices = c(
    "Sexo" = "sexo",
    "Edad" = "grupo_edad",
    "Intencionalidad" = "intencionalidad"
  )
)

## Selector de colores
selectInput(
  inputId = "pal1",
  label = "Paleta de colores",
  choices = c(
    "Managua" = "scico.managua",
    "Icefire" = "icefire",
    "Tokyo" = "-scico.tokyo",
    "Viridis" = "-viridis"
  ),
  selected = "-viridis"
)

## Mapa base
selectInput(
  inputId = "base1",
  label = "Mapa base",
  choices = c(
    "Argenmap (híbrido)" = argenmap_hyb,
    "Argenmap (color)" = argenmap
  )
)

## Descargar datos
tags$p("Descargar datos:")

# CSV
downloadButton(
  outputId = "down_csv2",
  label = NULL,
  icon = icon("file-csv"),
  class = "btn-download"
)

# Excel
downloadButton(
  outputId = "down_excel2",
  label = NULL,
  icon = icon("file-excel"),
  class = "btn-download"
)
```

## Columna
### Mapa

```{r}
#| id: Mapa 2 - Casos por provincia
#| context: server
## Renderizar mapa
output$mapa2 <- renderLeaflet({
  req(input$provincia, input$estrato1, input$pal1)

  # Definir variables
  prov <- input$provincia
  estrato <- input$estrato1

  # Crear paleta de colores colorblind-friendly
  pal <- colorNumeric(
    palette = c4a(palette = input$pal1),
    domain = c(0, max(datos_mapa$n, na.rm = TRUE))
  )

  # Crear datos para el mapa
  datos_mapa <- shp_arg |>
    inner_join(
      tabyl(datos, !!sym(prov), !!sym(estrato)) |>
        adorn_totals(where = "col") |>
        rename(name_iso = !!sym(prov))
    )

  # Niveles estratificación
  cat <- names(datos_mapa |> st_drop_geometry() |> select(where(is.numeric)))

  # Crear mapa base
  m2 <- datos_mapa |>
    # Capa base Argentina
    leaflet(options = leafletOptions(minZoom = 3, maxZoom = 8)) |>
    addTiles(
      urlTemplate = input$base1,
      attribution = "Instituto Geográfico Nacional (IGN)"
    ) |>

    # Control de capas
    addLayersControl(
      overlayGroups = cat,
      options = layersControlOptions(collapsed = TRUE)
    ) |>
    hideGroup(cat[cat != "Total"])

  # Círculos reactivos
  for (x in cat) {
    m2 <- m2 |>
      addCircleMarkers(
        data = datos_mapa,
        radius = rescale(sqrt(datos_mapa[[x]]), to = c(5, 15)),
        fillColor = pal(datos_mapa[[x]]),
        fillOpacity = 0.75,
        stroke = FALSE,
        popup = ~ paste0(
          "<b>Provincia reporte: </b> ",
          name_iso,
          "<br>",
          "<b>Casos: </b>",
          datos_mapa[[x]]
        ),
        group = x
      )
  }

  # Mostrar
  m2 |>
    addLegend(
      title = "Frecuencia",
      pal = pal,
      values = datos_mapa$Total
    )
})
```

```{r}
#| id: Mostrar mapa 2
leafletOutput("mapa2")
```

### Tabla
```{r}
#| id: Tabla 1
#| context: server
## Reactive con la tabla (una sola vez)
tab1_data <- reactive({
  datos_tab <- datos |>
    select(starts_with("prov_"), sexo, grupo_edad, intencionalidad, egreso)

  vars <- names(datos_tab)
  v1 <- intersect(input$estrato1, vars)
  provincia <- input$provincia

  if (length(v1) == 0) {
    datos_tab |>
      count(!!sym(provincia)) |>
      mutate(pct = n / sum(n, na.rm = TRUE)) |>
      set_variable_labels(
        .labels = list(
          n = "Frecuencia",
          pct = "Porcentaje"
        )
      )
  } else {
    datos_tab |>
      count(!!sym(provincia), across(any_of(v1))) |>
      mutate(pct = n / sum(n, na.rm = TRUE), .by = provincia) |>
      set_variable_labels(
        .labels = list(
          n = "Frecuencia",
          pct = "Porcentaje"
        )
      )
  }
})

## Renderizar tabla DT
output$tab1 <- renderDT({
  source("tab_format.R")
  tab1_data() |> tab_format()
})

## Descargar como CSV
output$down_csv2 <- downloadHandler(
  filename = function() paste0("tabla_casos_", Sys.Date(), ".csv"),
  content = function(file) export(tab1_data(), file)
)

## Descargar como Excel
output$down_excel2 <- downloadHandler(
  filename = function() paste0("tabla_casos_", Sys.Date(), ".xlsx"),
  content = function(file) export(tab1_data(), file)
)
```

```{r}
#| id: Mostrar tab1
DTOutput("tab1")
```